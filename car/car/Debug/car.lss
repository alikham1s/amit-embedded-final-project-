
car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000065a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000006ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b4  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000732  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c1  00000000  00000000  00001752  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001b14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000413  00000000  00000000  00001ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000011b  00000000  00000000  00001fb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000020d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 11 01 	jmp	0x222	; 0x222 <__vector_16>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 e6 00 	call	0x1cc	; 0x1cc <main>
  78:	0c 94 2b 03 	jmp	0x656	; 0x656 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setup>:
	return 0;
}

void setup() {
	// Set IO pins as outputs
	DDRD |= (1 << IN1_PIN) | (1 << IN2_PIN) | (1 << IN3_PIN) | (1 << IN4_PIN)
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	8c 6f       	ori	r24, 0xFC	; 252
  84:	8a b9       	out	0x0a, r24	; 10
	| (1 << SpeedL_PIN) | (1 << SpeedR_PIN);

	// Initialize ADC
	ADMUX |= (1 << REFS0); // Reference voltage is AVCC
  86:	ec e7       	ldi	r30, 0x7C	; 124
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	80 64       	ori	r24, 0x40	; 64
  8e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADEN); // Set ADC prescaler to 64 and enable ADC
  90:	ea e7       	ldi	r30, 0x7A	; 122
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	86 68       	ori	r24, 0x86	; 134
  98:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Start ADC conversion
  9a:	80 81       	ld	r24, Z
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	80 83       	st	Z, r24

	// Initialize Timer1 for servo control
	ICR1 = 19999; // TOP value for 20ms period (50 Hz)
  a0:	8f e1       	ldi	r24, 0x1F	; 31
  a2:	9e e4       	ldi	r25, 0x4E	; 78
  a4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  a8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	TCCR1A = (1 << WGM11) | (1 << COM1A1); // Configure Timer1 for fast PWM mode, non-inverted output on OC1A
  ac:	82 e8       	ldi	r24, 0x82	; 130
  ae:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11); // Prescaler of 8
  b2:	8a e1       	ldi	r24, 0x1A	; 26
  b4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 1500; // Initial PWM pulse width for servo
  b8:	8c ed       	ldi	r24, 0xDC	; 220
  ba:	95 e0       	ldi	r25, 0x05	; 5
  bc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  c0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

	// Enable Timer0 overflow interrupt
	TIMSK0 |= (1 << TOIE0); // Enable Timer0 overflow interrupt
  c4:	ee e6       	ldi	r30, 0x6E	; 110
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	80 83       	st	Z, r24

	// Initialize Timer2 for delay function
	TCCR2A = 0;
  ce:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1 << CS22) | (1 << CS21) | (1 << CS20); // Prescaler 1024
  d2:	87 e0       	ldi	r24, 0x07	; 7
  d4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TIMSK2 = (1 << OCIE2A); // Enable Timer2 OCR2A interrupt
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	OCR2A = 72; // Set compare value for 1ms delay
  de:	88 e4       	ldi	r24, 0x48	; 72
  e0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>

	// Enable interrupts
	sei();
  e4:	78 94       	sei
  e6:	08 95       	ret

000000e8 <measureDistance>:
}

int measureDistance(int angle) {
	OCR1A = 1000 + (angle / 180.0) * 1000; // Set servo angle
  e8:	bc 01       	movw	r22, r24
  ea:	99 0f       	add	r25, r25
  ec:	88 0b       	sbc	r24, r24
  ee:	99 0b       	sbc	r25, r25
  f0:	0e 94 32 02 	call	0x464	; 0x464 <__floatsisf>
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	44 e3       	ldi	r20, 0x34	; 52
  fa:	53 e4       	ldi	r21, 0x43	; 67
  fc:	0e 94 88 01 	call	0x310	; 0x310 <__divsf3>
 100:	20 e0       	ldi	r18, 0x00	; 0
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	4a e7       	ldi	r20, 0x7A	; 122
 106:	54 e4       	ldi	r21, 0x44	; 68
 108:	0e 94 be 02 	call	0x57c	; 0x57c <__mulsf3>
 10c:	20 e0       	ldi	r18, 0x00	; 0
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	4a e7       	ldi	r20, 0x7A	; 122
 112:	54 e4       	ldi	r21, 0x44	; 68
 114:	0e 94 1c 01 	call	0x238	; 0x238 <__addsf3>
 118:	0e 94 01 02 	call	0x402	; 0x402 <__fixunssfsi>
 11c:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 120:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	8f e4       	ldi	r24, 0x4F	; 79
 126:	93 ec       	ldi	r25, 0xC3	; 195
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <measureDistance+0x40>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <measureDistance+0x46>
 12e:	00 00       	nop

	_delay_ms(200); // Delay for servo to move

	// Start ADC conversion
	ADCSRA |= (1 << ADSC);
 130:	ea e7       	ldi	r30, 0x7A	; 122
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	80 64       	ori	r24, 0x40	; 64
 138:	80 83       	st	Z, r24
	while(ADCSRA & (1 << ADSC)); // Wait for conversion to complete
 13a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 13e:	86 fd       	sbrc	r24, 6
 140:	fc cf       	rjmp	.-8      	; 0x13a <measureDistance+0x52>

	// Calculate distance
	float voltage = ADC / 1023.0 * 5.0;
 142:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 146:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 30 02 	call	0x460	; 0x460 <__floatunsisf>
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 ec       	ldi	r19, 0xC0	; 192
 156:	4f e7       	ldi	r20, 0x7F	; 127
 158:	54 e4       	ldi	r21, 0x44	; 68
 15a:	0e 94 88 01 	call	0x310	; 0x310 <__divsf3>
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	40 ea       	ldi	r20, 0xA0	; 160
 164:	50 e4       	ldi	r21, 0x40	; 64
 166:	0e 94 be 02 	call	0x57c	; 0x57c <__mulsf3>
	int distance = (int) ((voltage * 1000) / 5);
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	4a e7       	ldi	r20, 0x7A	; 122
 170:	54 e4       	ldi	r21, 0x44	; 68
 172:	0e 94 be 02 	call	0x57c	; 0x57c <__mulsf3>
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	40 ea       	ldi	r20, 0xA0	; 160
 17c:	50 e4       	ldi	r21, 0x40	; 64
 17e:	0e 94 88 01 	call	0x310	; 0x310 <__divsf3>
 182:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__fixsfsi>

	return distance;
}
 186:	cb 01       	movw	r24, r22
 188:	08 95       	ret

0000018a <moveForward>:

void moveForward() {
	PORTD |= (1 << IN1_PIN) | (1 << IN3_PIN); // Set IN1 and IN3 high
 18a:	8b b1       	in	r24, 0x0b	; 11
 18c:	84 62       	ori	r24, 0x24	; 36
 18e:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~((1 << IN2_PIN) | (1 << IN4_PIN)); // Set IN2 and IN4 low
 190:	8b b1       	in	r24, 0x0b	; 11
 192:	8f 76       	andi	r24, 0x6F	; 111
 194:	8b b9       	out	0x0b, r24	; 11
	OCR0A = 255; // Set SpeedL_PIN PWM value
 196:	8f ef       	ldi	r24, 0xFF	; 255
 198:	87 bd       	out	0x27, r24	; 39
	OCR0B = 255; // Set SpeedR_PIN PWM value
 19a:	88 bd       	out	0x28, r24	; 40
 19c:	08 95       	ret

0000019e <turnLeft>:
}

void turnLeft() {
	PORTD &= ~((1 << IN1_PIN) | (1 << IN3_PIN)); // Set IN1 and IN3 low
 19e:	8b b1       	in	r24, 0x0b	; 11
 1a0:	8b 7d       	andi	r24, 0xDB	; 219
 1a2:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << IN2_PIN); // Set IN2 high
 1a4:	8b b1       	in	r24, 0x0b	; 11
 1a6:	80 61       	ori	r24, 0x10	; 16
 1a8:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << IN4_PIN); // Set IN4 low
 1aa:	8b b1       	in	r24, 0x0b	; 11
 1ac:	8f 77       	andi	r24, 0x7F	; 127
 1ae:	8b b9       	out	0x0b, r24	; 11
	OCR0A = 200; // Set SpeedL_PIN PWM value
 1b0:	88 ec       	ldi	r24, 0xC8	; 200
 1b2:	87 bd       	out	0x27, r24	; 39
	OCR0B = 200; // Set SpeedR_PIN PWM value
 1b4:	88 bd       	out	0x28, r24	; 40
 1b6:	08 95       	ret

000001b8 <turnRight>:
}

void turnRight() {
	PORTD |= (1 << IN1_PIN); // Set IN1 high
 1b8:	8b b1       	in	r24, 0x0b	; 11
 1ba:	84 60       	ori	r24, 0x04	; 4
 1bc:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~((1 << IN2_PIN) | (1 << IN3_PIN) | (1 << IN4_PIN)); // Set IN2, IN3, and IN4 low
 1be:	8b b1       	in	r24, 0x0b	; 11
 1c0:	8f 74       	andi	r24, 0x4F	; 79
 1c2:	8b b9       	out	0x0b, r24	; 11
	OCR0A = 200; // Set SpeedL_PIN PWM value
 1c4:	88 ec       	ldi	r24, 0xC8	; 200
 1c6:	87 bd       	out	0x27, r24	; 39
	OCR0B = 200; // Set SpeedR_PIN PWM value
 1c8:	88 bd       	out	0x28, r24	; 40
 1ca:	08 95       	ret

000001cc <main>:
void moveForward();
void turnLeft();
void turnRight();

int main(void) {
	setup();
 1cc:	0e 94 40 00 	call	0x80	; 0x80 <setup>

	while (1) {
		int distanceFront = measureDistance(90);
 1d0:	8a e5       	ldi	r24, 0x5A	; 90
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 74 00 	call	0xe8	; 0xe8 <measureDistance>
 1d8:	8c 01       	movw	r16, r24
		int distanceLeft = measureDistance(70);
 1da:	86 e4       	ldi	r24, 0x46	; 70
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 74 00 	call	0xe8	; 0xe8 <measureDistance>
 1e2:	ec 01       	movw	r28, r24
		int distanceRight = measureDistance(110);
 1e4:	8e e6       	ldi	r24, 0x6E	; 110
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 74 00 	call	0xe8	; 0xe8 <measureDistance>

		if (distanceFront <= distanceLeft && distanceFront <= distanceRight) {
 1ec:	c0 17       	cp	r28, r16
 1ee:	d1 07       	cpc	r29, r17
 1f0:	34 f0       	brlt	.+12     	; 0x1fe <main+0x32>
 1f2:	80 17       	cp	r24, r16
 1f4:	91 07       	cpc	r25, r17
 1f6:	1c f0       	brlt	.+6      	; 0x1fe <main+0x32>
			// Move forward
			moveForward();
 1f8:	0e 94 c5 00 	call	0x18a	; 0x18a <moveForward>
 1fc:	08 c0       	rjmp	.+16     	; 0x20e <main+0x42>
			} else if (distanceLeft < distanceRight) {
 1fe:	c8 17       	cp	r28, r24
 200:	d9 07       	cpc	r29, r25
 202:	1c f4       	brge	.+6      	; 0x20a <main+0x3e>
			// Turn left
			turnLeft();
 204:	0e 94 cf 00 	call	0x19e	; 0x19e <turnLeft>
 208:	02 c0       	rjmp	.+4      	; 0x20e <main+0x42>
			} else {
			// Turn right
			turnRight();
 20a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <turnRight>
 20e:	2f e7       	ldi	r18, 0x7F	; 127
 210:	8a e1       	ldi	r24, 0x1A	; 26
 212:	96 e0       	ldi	r25, 0x06	; 6
 214:	21 50       	subi	r18, 0x01	; 1
 216:	80 40       	sbci	r24, 0x00	; 0
 218:	90 40       	sbci	r25, 0x00	; 0
 21a:	e1 f7       	brne	.-8      	; 0x214 <main+0x48>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <main+0x52>
 21e:	00 00       	nop
 220:	d7 cf       	rjmp	.-82     	; 0x1d0 <main+0x4>

00000222 <__vector_16>:
	OCR0A = 200; // Set SpeedL_PIN PWM value
	OCR0B = 200; // Set SpeedR_PIN PWM value
}

// Timer0 overflow interrupt service routine
ISR(TIMER0_OVF_vect) {
 222:	1f 92       	push	r1
 224:	0f 92       	push	r0
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	0f 92       	push	r0
 22a:	11 24       	eor	r1, r1
	// Code to be executed on Timer0 overflow
	// Add the necessary code here
}
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <__subsf3>:
 236:	50 58       	subi	r21, 0x80	; 128

00000238 <__addsf3>:
 238:	bb 27       	eor	r27, r27
 23a:	aa 27       	eor	r26, r26
 23c:	0e 94 33 01 	call	0x266	; 0x266 <__addsf3x>
 240:	0c 94 84 02 	jmp	0x508	; 0x508 <__fp_round>
 244:	0e 94 76 02 	call	0x4ec	; 0x4ec <__fp_pscA>
 248:	38 f0       	brcs	.+14     	; 0x258 <__addsf3+0x20>
 24a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__fp_pscB>
 24e:	20 f0       	brcs	.+8      	; 0x258 <__addsf3+0x20>
 250:	39 f4       	brne	.+14     	; 0x260 <__addsf3+0x28>
 252:	9f 3f       	cpi	r25, 0xFF	; 255
 254:	19 f4       	brne	.+6      	; 0x25c <__addsf3+0x24>
 256:	26 f4       	brtc	.+8      	; 0x260 <__addsf3+0x28>
 258:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__fp_nan>
 25c:	0e f4       	brtc	.+2      	; 0x260 <__addsf3+0x28>
 25e:	e0 95       	com	r30
 260:	e7 fb       	bst	r30, 7
 262:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__fp_inf>

00000266 <__addsf3x>:
 266:	e9 2f       	mov	r30, r25
 268:	0e 94 95 02 	call	0x52a	; 0x52a <__fp_split3>
 26c:	58 f3       	brcs	.-42     	; 0x244 <__addsf3+0xc>
 26e:	ba 17       	cp	r27, r26
 270:	62 07       	cpc	r22, r18
 272:	73 07       	cpc	r23, r19
 274:	84 07       	cpc	r24, r20
 276:	95 07       	cpc	r25, r21
 278:	20 f0       	brcs	.+8      	; 0x282 <__addsf3x+0x1c>
 27a:	79 f4       	brne	.+30     	; 0x29a <__addsf3x+0x34>
 27c:	a6 f5       	brtc	.+104    	; 0x2e6 <__addsf3x+0x80>
 27e:	0c 94 b7 02 	jmp	0x56e	; 0x56e <__fp_zero>
 282:	0e f4       	brtc	.+2      	; 0x286 <__addsf3x+0x20>
 284:	e0 95       	com	r30
 286:	0b 2e       	mov	r0, r27
 288:	ba 2f       	mov	r27, r26
 28a:	a0 2d       	mov	r26, r0
 28c:	0b 01       	movw	r0, r22
 28e:	b9 01       	movw	r22, r18
 290:	90 01       	movw	r18, r0
 292:	0c 01       	movw	r0, r24
 294:	ca 01       	movw	r24, r20
 296:	a0 01       	movw	r20, r0
 298:	11 24       	eor	r1, r1
 29a:	ff 27       	eor	r31, r31
 29c:	59 1b       	sub	r21, r25
 29e:	99 f0       	breq	.+38     	; 0x2c6 <__addsf3x+0x60>
 2a0:	59 3f       	cpi	r21, 0xF9	; 249
 2a2:	50 f4       	brcc	.+20     	; 0x2b8 <__addsf3x+0x52>
 2a4:	50 3e       	cpi	r21, 0xE0	; 224
 2a6:	68 f1       	brcs	.+90     	; 0x302 <__addsf3x+0x9c>
 2a8:	1a 16       	cp	r1, r26
 2aa:	f0 40       	sbci	r31, 0x00	; 0
 2ac:	a2 2f       	mov	r26, r18
 2ae:	23 2f       	mov	r18, r19
 2b0:	34 2f       	mov	r19, r20
 2b2:	44 27       	eor	r20, r20
 2b4:	58 5f       	subi	r21, 0xF8	; 248
 2b6:	f3 cf       	rjmp	.-26     	; 0x29e <__addsf3x+0x38>
 2b8:	46 95       	lsr	r20
 2ba:	37 95       	ror	r19
 2bc:	27 95       	ror	r18
 2be:	a7 95       	ror	r26
 2c0:	f0 40       	sbci	r31, 0x00	; 0
 2c2:	53 95       	inc	r21
 2c4:	c9 f7       	brne	.-14     	; 0x2b8 <__addsf3x+0x52>
 2c6:	7e f4       	brtc	.+30     	; 0x2e6 <__addsf3x+0x80>
 2c8:	1f 16       	cp	r1, r31
 2ca:	ba 0b       	sbc	r27, r26
 2cc:	62 0b       	sbc	r22, r18
 2ce:	73 0b       	sbc	r23, r19
 2d0:	84 0b       	sbc	r24, r20
 2d2:	ba f0       	brmi	.+46     	; 0x302 <__addsf3x+0x9c>
 2d4:	91 50       	subi	r25, 0x01	; 1
 2d6:	a1 f0       	breq	.+40     	; 0x300 <__addsf3x+0x9a>
 2d8:	ff 0f       	add	r31, r31
 2da:	bb 1f       	adc	r27, r27
 2dc:	66 1f       	adc	r22, r22
 2de:	77 1f       	adc	r23, r23
 2e0:	88 1f       	adc	r24, r24
 2e2:	c2 f7       	brpl	.-16     	; 0x2d4 <__addsf3x+0x6e>
 2e4:	0e c0       	rjmp	.+28     	; 0x302 <__addsf3x+0x9c>
 2e6:	ba 0f       	add	r27, r26
 2e8:	62 1f       	adc	r22, r18
 2ea:	73 1f       	adc	r23, r19
 2ec:	84 1f       	adc	r24, r20
 2ee:	48 f4       	brcc	.+18     	; 0x302 <__addsf3x+0x9c>
 2f0:	87 95       	ror	r24
 2f2:	77 95       	ror	r23
 2f4:	67 95       	ror	r22
 2f6:	b7 95       	ror	r27
 2f8:	f7 95       	ror	r31
 2fa:	9e 3f       	cpi	r25, 0xFE	; 254
 2fc:	08 f0       	brcs	.+2      	; 0x300 <__addsf3x+0x9a>
 2fe:	b0 cf       	rjmp	.-160    	; 0x260 <__addsf3+0x28>
 300:	93 95       	inc	r25
 302:	88 0f       	add	r24, r24
 304:	08 f0       	brcs	.+2      	; 0x308 <__addsf3x+0xa2>
 306:	99 27       	eor	r25, r25
 308:	ee 0f       	add	r30, r30
 30a:	97 95       	ror	r25
 30c:	87 95       	ror	r24
 30e:	08 95       	ret

00000310 <__divsf3>:
 310:	0e 94 9c 01 	call	0x338	; 0x338 <__divsf3x>
 314:	0c 94 84 02 	jmp	0x508	; 0x508 <__fp_round>
 318:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__fp_pscB>
 31c:	58 f0       	brcs	.+22     	; 0x334 <__divsf3+0x24>
 31e:	0e 94 76 02 	call	0x4ec	; 0x4ec <__fp_pscA>
 322:	40 f0       	brcs	.+16     	; 0x334 <__divsf3+0x24>
 324:	29 f4       	brne	.+10     	; 0x330 <__divsf3+0x20>
 326:	5f 3f       	cpi	r21, 0xFF	; 255
 328:	29 f0       	breq	.+10     	; 0x334 <__divsf3+0x24>
 32a:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__fp_inf>
 32e:	51 11       	cpse	r21, r1
 330:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_szero>
 334:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__fp_nan>

00000338 <__divsf3x>:
 338:	0e 94 95 02 	call	0x52a	; 0x52a <__fp_split3>
 33c:	68 f3       	brcs	.-38     	; 0x318 <__divsf3+0x8>

0000033e <__divsf3_pse>:
 33e:	99 23       	and	r25, r25
 340:	b1 f3       	breq	.-20     	; 0x32e <__divsf3+0x1e>
 342:	55 23       	and	r21, r21
 344:	91 f3       	breq	.-28     	; 0x32a <__divsf3+0x1a>
 346:	95 1b       	sub	r25, r21
 348:	55 0b       	sbc	r21, r21
 34a:	bb 27       	eor	r27, r27
 34c:	aa 27       	eor	r26, r26
 34e:	62 17       	cp	r22, r18
 350:	73 07       	cpc	r23, r19
 352:	84 07       	cpc	r24, r20
 354:	38 f0       	brcs	.+14     	; 0x364 <__divsf3_pse+0x26>
 356:	9f 5f       	subi	r25, 0xFF	; 255
 358:	5f 4f       	sbci	r21, 0xFF	; 255
 35a:	22 0f       	add	r18, r18
 35c:	33 1f       	adc	r19, r19
 35e:	44 1f       	adc	r20, r20
 360:	aa 1f       	adc	r26, r26
 362:	a9 f3       	breq	.-22     	; 0x34e <__divsf3_pse+0x10>
 364:	35 d0       	rcall	.+106    	; 0x3d0 <__divsf3_pse+0x92>
 366:	0e 2e       	mov	r0, r30
 368:	3a f0       	brmi	.+14     	; 0x378 <__divsf3_pse+0x3a>
 36a:	e0 e8       	ldi	r30, 0x80	; 128
 36c:	32 d0       	rcall	.+100    	; 0x3d2 <__divsf3_pse+0x94>
 36e:	91 50       	subi	r25, 0x01	; 1
 370:	50 40       	sbci	r21, 0x00	; 0
 372:	e6 95       	lsr	r30
 374:	00 1c       	adc	r0, r0
 376:	ca f7       	brpl	.-14     	; 0x36a <__divsf3_pse+0x2c>
 378:	2b d0       	rcall	.+86     	; 0x3d0 <__divsf3_pse+0x92>
 37a:	fe 2f       	mov	r31, r30
 37c:	29 d0       	rcall	.+82     	; 0x3d0 <__divsf3_pse+0x92>
 37e:	66 0f       	add	r22, r22
 380:	77 1f       	adc	r23, r23
 382:	88 1f       	adc	r24, r24
 384:	bb 1f       	adc	r27, r27
 386:	26 17       	cp	r18, r22
 388:	37 07       	cpc	r19, r23
 38a:	48 07       	cpc	r20, r24
 38c:	ab 07       	cpc	r26, r27
 38e:	b0 e8       	ldi	r27, 0x80	; 128
 390:	09 f0       	breq	.+2      	; 0x394 <__divsf3_pse+0x56>
 392:	bb 0b       	sbc	r27, r27
 394:	80 2d       	mov	r24, r0
 396:	bf 01       	movw	r22, r30
 398:	ff 27       	eor	r31, r31
 39a:	93 58       	subi	r25, 0x83	; 131
 39c:	5f 4f       	sbci	r21, 0xFF	; 255
 39e:	3a f0       	brmi	.+14     	; 0x3ae <__divsf3_pse+0x70>
 3a0:	9e 3f       	cpi	r25, 0xFE	; 254
 3a2:	51 05       	cpc	r21, r1
 3a4:	78 f0       	brcs	.+30     	; 0x3c4 <__divsf3_pse+0x86>
 3a6:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__fp_inf>
 3aa:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_szero>
 3ae:	5f 3f       	cpi	r21, 0xFF	; 255
 3b0:	e4 f3       	brlt	.-8      	; 0x3aa <__divsf3_pse+0x6c>
 3b2:	98 3e       	cpi	r25, 0xE8	; 232
 3b4:	d4 f3       	brlt	.-12     	; 0x3aa <__divsf3_pse+0x6c>
 3b6:	86 95       	lsr	r24
 3b8:	77 95       	ror	r23
 3ba:	67 95       	ror	r22
 3bc:	b7 95       	ror	r27
 3be:	f7 95       	ror	r31
 3c0:	9f 5f       	subi	r25, 0xFF	; 255
 3c2:	c9 f7       	brne	.-14     	; 0x3b6 <__divsf3_pse+0x78>
 3c4:	88 0f       	add	r24, r24
 3c6:	91 1d       	adc	r25, r1
 3c8:	96 95       	lsr	r25
 3ca:	87 95       	ror	r24
 3cc:	97 f9       	bld	r25, 7
 3ce:	08 95       	ret
 3d0:	e1 e0       	ldi	r30, 0x01	; 1
 3d2:	66 0f       	add	r22, r22
 3d4:	77 1f       	adc	r23, r23
 3d6:	88 1f       	adc	r24, r24
 3d8:	bb 1f       	adc	r27, r27
 3da:	62 17       	cp	r22, r18
 3dc:	73 07       	cpc	r23, r19
 3de:	84 07       	cpc	r24, r20
 3e0:	ba 07       	cpc	r27, r26
 3e2:	20 f0       	brcs	.+8      	; 0x3ec <__divsf3_pse+0xae>
 3e4:	62 1b       	sub	r22, r18
 3e6:	73 0b       	sbc	r23, r19
 3e8:	84 0b       	sbc	r24, r20
 3ea:	ba 0b       	sbc	r27, r26
 3ec:	ee 1f       	adc	r30, r30
 3ee:	88 f7       	brcc	.-30     	; 0x3d2 <__divsf3_pse+0x94>
 3f0:	e0 95       	com	r30
 3f2:	08 95       	ret

000003f4 <__fixsfsi>:
 3f4:	0e 94 01 02 	call	0x402	; 0x402 <__fixunssfsi>
 3f8:	68 94       	set
 3fa:	b1 11       	cpse	r27, r1
 3fc:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_szero>
 400:	08 95       	ret

00000402 <__fixunssfsi>:
 402:	0e 94 9d 02 	call	0x53a	; 0x53a <__fp_splitA>
 406:	88 f0       	brcs	.+34     	; 0x42a <__fixunssfsi+0x28>
 408:	9f 57       	subi	r25, 0x7F	; 127
 40a:	98 f0       	brcs	.+38     	; 0x432 <__fixunssfsi+0x30>
 40c:	b9 2f       	mov	r27, r25
 40e:	99 27       	eor	r25, r25
 410:	b7 51       	subi	r27, 0x17	; 23
 412:	b0 f0       	brcs	.+44     	; 0x440 <__fixunssfsi+0x3e>
 414:	e1 f0       	breq	.+56     	; 0x44e <__fixunssfsi+0x4c>
 416:	66 0f       	add	r22, r22
 418:	77 1f       	adc	r23, r23
 41a:	88 1f       	adc	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	1a f0       	brmi	.+6      	; 0x426 <__fixunssfsi+0x24>
 420:	ba 95       	dec	r27
 422:	c9 f7       	brne	.-14     	; 0x416 <__fixunssfsi+0x14>
 424:	14 c0       	rjmp	.+40     	; 0x44e <__fixunssfsi+0x4c>
 426:	b1 30       	cpi	r27, 0x01	; 1
 428:	91 f0       	breq	.+36     	; 0x44e <__fixunssfsi+0x4c>
 42a:	0e 94 b7 02 	call	0x56e	; 0x56e <__fp_zero>
 42e:	b1 e0       	ldi	r27, 0x01	; 1
 430:	08 95       	ret
 432:	0c 94 b7 02 	jmp	0x56e	; 0x56e <__fp_zero>
 436:	67 2f       	mov	r22, r23
 438:	78 2f       	mov	r23, r24
 43a:	88 27       	eor	r24, r24
 43c:	b8 5f       	subi	r27, 0xF8	; 248
 43e:	39 f0       	breq	.+14     	; 0x44e <__fixunssfsi+0x4c>
 440:	b9 3f       	cpi	r27, 0xF9	; 249
 442:	cc f3       	brlt	.-14     	; 0x436 <__fixunssfsi+0x34>
 444:	86 95       	lsr	r24
 446:	77 95       	ror	r23
 448:	67 95       	ror	r22
 44a:	b3 95       	inc	r27
 44c:	d9 f7       	brne	.-10     	; 0x444 <__fixunssfsi+0x42>
 44e:	3e f4       	brtc	.+14     	; 0x45e <__fixunssfsi+0x5c>
 450:	90 95       	com	r25
 452:	80 95       	com	r24
 454:	70 95       	com	r23
 456:	61 95       	neg	r22
 458:	7f 4f       	sbci	r23, 0xFF	; 255
 45a:	8f 4f       	sbci	r24, 0xFF	; 255
 45c:	9f 4f       	sbci	r25, 0xFF	; 255
 45e:	08 95       	ret

00000460 <__floatunsisf>:
 460:	e8 94       	clt
 462:	09 c0       	rjmp	.+18     	; 0x476 <__floatsisf+0x12>

00000464 <__floatsisf>:
 464:	97 fb       	bst	r25, 7
 466:	3e f4       	brtc	.+14     	; 0x476 <__floatsisf+0x12>
 468:	90 95       	com	r25
 46a:	80 95       	com	r24
 46c:	70 95       	com	r23
 46e:	61 95       	neg	r22
 470:	7f 4f       	sbci	r23, 0xFF	; 255
 472:	8f 4f       	sbci	r24, 0xFF	; 255
 474:	9f 4f       	sbci	r25, 0xFF	; 255
 476:	99 23       	and	r25, r25
 478:	a9 f0       	breq	.+42     	; 0x4a4 <__floatsisf+0x40>
 47a:	f9 2f       	mov	r31, r25
 47c:	96 e9       	ldi	r25, 0x96	; 150
 47e:	bb 27       	eor	r27, r27
 480:	93 95       	inc	r25
 482:	f6 95       	lsr	r31
 484:	87 95       	ror	r24
 486:	77 95       	ror	r23
 488:	67 95       	ror	r22
 48a:	b7 95       	ror	r27
 48c:	f1 11       	cpse	r31, r1
 48e:	f8 cf       	rjmp	.-16     	; 0x480 <__floatsisf+0x1c>
 490:	fa f4       	brpl	.+62     	; 0x4d0 <__floatsisf+0x6c>
 492:	bb 0f       	add	r27, r27
 494:	11 f4       	brne	.+4      	; 0x49a <__floatsisf+0x36>
 496:	60 ff       	sbrs	r22, 0
 498:	1b c0       	rjmp	.+54     	; 0x4d0 <__floatsisf+0x6c>
 49a:	6f 5f       	subi	r22, 0xFF	; 255
 49c:	7f 4f       	sbci	r23, 0xFF	; 255
 49e:	8f 4f       	sbci	r24, 0xFF	; 255
 4a0:	9f 4f       	sbci	r25, 0xFF	; 255
 4a2:	16 c0       	rjmp	.+44     	; 0x4d0 <__floatsisf+0x6c>
 4a4:	88 23       	and	r24, r24
 4a6:	11 f0       	breq	.+4      	; 0x4ac <__floatsisf+0x48>
 4a8:	96 e9       	ldi	r25, 0x96	; 150
 4aa:	11 c0       	rjmp	.+34     	; 0x4ce <__floatsisf+0x6a>
 4ac:	77 23       	and	r23, r23
 4ae:	21 f0       	breq	.+8      	; 0x4b8 <__floatsisf+0x54>
 4b0:	9e e8       	ldi	r25, 0x8E	; 142
 4b2:	87 2f       	mov	r24, r23
 4b4:	76 2f       	mov	r23, r22
 4b6:	05 c0       	rjmp	.+10     	; 0x4c2 <__floatsisf+0x5e>
 4b8:	66 23       	and	r22, r22
 4ba:	71 f0       	breq	.+28     	; 0x4d8 <__floatsisf+0x74>
 4bc:	96 e8       	ldi	r25, 0x86	; 134
 4be:	86 2f       	mov	r24, r22
 4c0:	70 e0       	ldi	r23, 0x00	; 0
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	2a f0       	brmi	.+10     	; 0x4d0 <__floatsisf+0x6c>
 4c6:	9a 95       	dec	r25
 4c8:	66 0f       	add	r22, r22
 4ca:	77 1f       	adc	r23, r23
 4cc:	88 1f       	adc	r24, r24
 4ce:	da f7       	brpl	.-10     	; 0x4c6 <__floatsisf+0x62>
 4d0:	88 0f       	add	r24, r24
 4d2:	96 95       	lsr	r25
 4d4:	87 95       	ror	r24
 4d6:	97 f9       	bld	r25, 7
 4d8:	08 95       	ret

000004da <__fp_inf>:
 4da:	97 f9       	bld	r25, 7
 4dc:	9f 67       	ori	r25, 0x7F	; 127
 4de:	80 e8       	ldi	r24, 0x80	; 128
 4e0:	70 e0       	ldi	r23, 0x00	; 0
 4e2:	60 e0       	ldi	r22, 0x00	; 0
 4e4:	08 95       	ret

000004e6 <__fp_nan>:
 4e6:	9f ef       	ldi	r25, 0xFF	; 255
 4e8:	80 ec       	ldi	r24, 0xC0	; 192
 4ea:	08 95       	ret

000004ec <__fp_pscA>:
 4ec:	00 24       	eor	r0, r0
 4ee:	0a 94       	dec	r0
 4f0:	16 16       	cp	r1, r22
 4f2:	17 06       	cpc	r1, r23
 4f4:	18 06       	cpc	r1, r24
 4f6:	09 06       	cpc	r0, r25
 4f8:	08 95       	ret

000004fa <__fp_pscB>:
 4fa:	00 24       	eor	r0, r0
 4fc:	0a 94       	dec	r0
 4fe:	12 16       	cp	r1, r18
 500:	13 06       	cpc	r1, r19
 502:	14 06       	cpc	r1, r20
 504:	05 06       	cpc	r0, r21
 506:	08 95       	ret

00000508 <__fp_round>:
 508:	09 2e       	mov	r0, r25
 50a:	03 94       	inc	r0
 50c:	00 0c       	add	r0, r0
 50e:	11 f4       	brne	.+4      	; 0x514 <__fp_round+0xc>
 510:	88 23       	and	r24, r24
 512:	52 f0       	brmi	.+20     	; 0x528 <__fp_round+0x20>
 514:	bb 0f       	add	r27, r27
 516:	40 f4       	brcc	.+16     	; 0x528 <__fp_round+0x20>
 518:	bf 2b       	or	r27, r31
 51a:	11 f4       	brne	.+4      	; 0x520 <__fp_round+0x18>
 51c:	60 ff       	sbrs	r22, 0
 51e:	04 c0       	rjmp	.+8      	; 0x528 <__fp_round+0x20>
 520:	6f 5f       	subi	r22, 0xFF	; 255
 522:	7f 4f       	sbci	r23, 0xFF	; 255
 524:	8f 4f       	sbci	r24, 0xFF	; 255
 526:	9f 4f       	sbci	r25, 0xFF	; 255
 528:	08 95       	ret

0000052a <__fp_split3>:
 52a:	57 fd       	sbrc	r21, 7
 52c:	90 58       	subi	r25, 0x80	; 128
 52e:	44 0f       	add	r20, r20
 530:	55 1f       	adc	r21, r21
 532:	59 f0       	breq	.+22     	; 0x54a <__fp_splitA+0x10>
 534:	5f 3f       	cpi	r21, 0xFF	; 255
 536:	71 f0       	breq	.+28     	; 0x554 <__fp_splitA+0x1a>
 538:	47 95       	ror	r20

0000053a <__fp_splitA>:
 53a:	88 0f       	add	r24, r24
 53c:	97 fb       	bst	r25, 7
 53e:	99 1f       	adc	r25, r25
 540:	61 f0       	breq	.+24     	; 0x55a <__fp_splitA+0x20>
 542:	9f 3f       	cpi	r25, 0xFF	; 255
 544:	79 f0       	breq	.+30     	; 0x564 <__fp_splitA+0x2a>
 546:	87 95       	ror	r24
 548:	08 95       	ret
 54a:	12 16       	cp	r1, r18
 54c:	13 06       	cpc	r1, r19
 54e:	14 06       	cpc	r1, r20
 550:	55 1f       	adc	r21, r21
 552:	f2 cf       	rjmp	.-28     	; 0x538 <__fp_split3+0xe>
 554:	46 95       	lsr	r20
 556:	f1 df       	rcall	.-30     	; 0x53a <__fp_splitA>
 558:	08 c0       	rjmp	.+16     	; 0x56a <__fp_splitA+0x30>
 55a:	16 16       	cp	r1, r22
 55c:	17 06       	cpc	r1, r23
 55e:	18 06       	cpc	r1, r24
 560:	99 1f       	adc	r25, r25
 562:	f1 cf       	rjmp	.-30     	; 0x546 <__fp_splitA+0xc>
 564:	86 95       	lsr	r24
 566:	71 05       	cpc	r23, r1
 568:	61 05       	cpc	r22, r1
 56a:	08 94       	sec
 56c:	08 95       	ret

0000056e <__fp_zero>:
 56e:	e8 94       	clt

00000570 <__fp_szero>:
 570:	bb 27       	eor	r27, r27
 572:	66 27       	eor	r22, r22
 574:	77 27       	eor	r23, r23
 576:	cb 01       	movw	r24, r22
 578:	97 f9       	bld	r25, 7
 57a:	08 95       	ret

0000057c <__mulsf3>:
 57c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__mulsf3x>
 580:	0c 94 84 02 	jmp	0x508	; 0x508 <__fp_round>
 584:	0e 94 76 02 	call	0x4ec	; 0x4ec <__fp_pscA>
 588:	38 f0       	brcs	.+14     	; 0x598 <__mulsf3+0x1c>
 58a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__fp_pscB>
 58e:	20 f0       	brcs	.+8      	; 0x598 <__mulsf3+0x1c>
 590:	95 23       	and	r25, r21
 592:	11 f0       	breq	.+4      	; 0x598 <__mulsf3+0x1c>
 594:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__fp_inf>
 598:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__fp_nan>
 59c:	11 24       	eor	r1, r1
 59e:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_szero>

000005a2 <__mulsf3x>:
 5a2:	0e 94 95 02 	call	0x52a	; 0x52a <__fp_split3>
 5a6:	70 f3       	brcs	.-36     	; 0x584 <__mulsf3+0x8>

000005a8 <__mulsf3_pse>:
 5a8:	95 9f       	mul	r25, r21
 5aa:	c1 f3       	breq	.-16     	; 0x59c <__mulsf3+0x20>
 5ac:	95 0f       	add	r25, r21
 5ae:	50 e0       	ldi	r21, 0x00	; 0
 5b0:	55 1f       	adc	r21, r21
 5b2:	62 9f       	mul	r22, r18
 5b4:	f0 01       	movw	r30, r0
 5b6:	72 9f       	mul	r23, r18
 5b8:	bb 27       	eor	r27, r27
 5ba:	f0 0d       	add	r31, r0
 5bc:	b1 1d       	adc	r27, r1
 5be:	63 9f       	mul	r22, r19
 5c0:	aa 27       	eor	r26, r26
 5c2:	f0 0d       	add	r31, r0
 5c4:	b1 1d       	adc	r27, r1
 5c6:	aa 1f       	adc	r26, r26
 5c8:	64 9f       	mul	r22, r20
 5ca:	66 27       	eor	r22, r22
 5cc:	b0 0d       	add	r27, r0
 5ce:	a1 1d       	adc	r26, r1
 5d0:	66 1f       	adc	r22, r22
 5d2:	82 9f       	mul	r24, r18
 5d4:	22 27       	eor	r18, r18
 5d6:	b0 0d       	add	r27, r0
 5d8:	a1 1d       	adc	r26, r1
 5da:	62 1f       	adc	r22, r18
 5dc:	73 9f       	mul	r23, r19
 5de:	b0 0d       	add	r27, r0
 5e0:	a1 1d       	adc	r26, r1
 5e2:	62 1f       	adc	r22, r18
 5e4:	83 9f       	mul	r24, r19
 5e6:	a0 0d       	add	r26, r0
 5e8:	61 1d       	adc	r22, r1
 5ea:	22 1f       	adc	r18, r18
 5ec:	74 9f       	mul	r23, r20
 5ee:	33 27       	eor	r19, r19
 5f0:	a0 0d       	add	r26, r0
 5f2:	61 1d       	adc	r22, r1
 5f4:	23 1f       	adc	r18, r19
 5f6:	84 9f       	mul	r24, r20
 5f8:	60 0d       	add	r22, r0
 5fa:	21 1d       	adc	r18, r1
 5fc:	82 2f       	mov	r24, r18
 5fe:	76 2f       	mov	r23, r22
 600:	6a 2f       	mov	r22, r26
 602:	11 24       	eor	r1, r1
 604:	9f 57       	subi	r25, 0x7F	; 127
 606:	50 40       	sbci	r21, 0x00	; 0
 608:	9a f0       	brmi	.+38     	; 0x630 <__mulsf3_pse+0x88>
 60a:	f1 f0       	breq	.+60     	; 0x648 <__mulsf3_pse+0xa0>
 60c:	88 23       	and	r24, r24
 60e:	4a f0       	brmi	.+18     	; 0x622 <__mulsf3_pse+0x7a>
 610:	ee 0f       	add	r30, r30
 612:	ff 1f       	adc	r31, r31
 614:	bb 1f       	adc	r27, r27
 616:	66 1f       	adc	r22, r22
 618:	77 1f       	adc	r23, r23
 61a:	88 1f       	adc	r24, r24
 61c:	91 50       	subi	r25, 0x01	; 1
 61e:	50 40       	sbci	r21, 0x00	; 0
 620:	a9 f7       	brne	.-22     	; 0x60c <__mulsf3_pse+0x64>
 622:	9e 3f       	cpi	r25, 0xFE	; 254
 624:	51 05       	cpc	r21, r1
 626:	80 f0       	brcs	.+32     	; 0x648 <__mulsf3_pse+0xa0>
 628:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__fp_inf>
 62c:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_szero>
 630:	5f 3f       	cpi	r21, 0xFF	; 255
 632:	e4 f3       	brlt	.-8      	; 0x62c <__mulsf3_pse+0x84>
 634:	98 3e       	cpi	r25, 0xE8	; 232
 636:	d4 f3       	brlt	.-12     	; 0x62c <__mulsf3_pse+0x84>
 638:	86 95       	lsr	r24
 63a:	77 95       	ror	r23
 63c:	67 95       	ror	r22
 63e:	b7 95       	ror	r27
 640:	f7 95       	ror	r31
 642:	e7 95       	ror	r30
 644:	9f 5f       	subi	r25, 0xFF	; 255
 646:	c1 f7       	brne	.-16     	; 0x638 <__mulsf3_pse+0x90>
 648:	fe 2b       	or	r31, r30
 64a:	88 0f       	add	r24, r24
 64c:	91 1d       	adc	r25, r1
 64e:	96 95       	lsr	r25
 650:	87 95       	ror	r24
 652:	97 f9       	bld	r25, 7
 654:	08 95       	ret

00000656 <_exit>:
 656:	f8 94       	cli

00000658 <__stop_program>:
 658:	ff cf       	rjmp	.-2      	; 0x658 <__stop_program>
